var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
import { Observable } from 'rxjs/Observable';
/**
 * @beta
 * @name Firebase Messaging
 * @description
 * Cordova plugin for Firebase Messaging
 *
 * @usage
 * ```typescript
 * import { FirebaseMessaging } from '@ionic-native/firebase-messaging';
 *
 *
 * constructor(private firebaseMessaging: FirebaseMessaging) { }
 *
 * ...
 *
 *
 * this.firebaseMessaging.logEvent('page_view', {page: "dashboard"})
 *   .then((res: any) => console.log(res))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 * @interfaces
 * IFirebaseMessage
 */
var FirebaseMessaging = (function (_super) {
    __extends(FirebaseMessaging, _super);
    function FirebaseMessaging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Called when a push message received while app is in foreground.
     *
     * @returns {Observable<any>}
     */
    /**
       * Called when a push message received while app is in foreground.
       *
       * @returns {Observable<any>}
       */
    FirebaseMessaging.prototype.onMessage = /**
       * Called when a push message received while app is in foreground.
       *
       * @returns {Observable<any>}
       */
    function () {
        return;
    };
    /**
     * Called when a push message received while app is in background.
     *
     * @returns {Observable<any>}
     */
    /**
       * Called when a push message received while app is in background.
       *
       * @returns {Observable<any>}
       */
    FirebaseMessaging.prototype.onBackgroundMessage = /**
       * Called when a push message received while app is in background.
       *
       * @returns {Observable<any>}
       */
    function () {
        return;
    };
    /**
     * Grant permission to recieve push notifications (will trigger prompt on iOS).
     *
     * @returns {Promise<string>}
     */
    /**
       * Grant permission to recieve push notifications (will trigger prompt on iOS).
       *
       * @returns {Promise<string>}
       */
    FirebaseMessaging.prototype.requestPermission = /**
       * Grant permission to recieve push notifications (will trigger prompt on iOS).
       *
       * @returns {Promise<string>}
       */
    function () {
        return;
    };
    /**
     * Returns a promise that fulfills with the current FCM token
     *
     * @returns {Promise<string>}
     */
    /**
       * Returns a promise that fulfills with the current FCM token
       *
       * @returns {Promise<string>}
       */
    FirebaseMessaging.prototype.getToken = /**
       * Returns a promise that fulfills with the current FCM token
       *
       * @returns {Promise<string>}
       */
    function () {
        return;
    };
    /**
     * Triggers every time when FCM token updated.
     * You should usually call getToken to get an updated token and send it to server.
     *
     * @returns {Observable<void>}
     */
    /**
       * Triggers every time when FCM token updated.
       * You should usually call getToken to get an updated token and send it to server.
       *
       * @returns {Observable<void>}
       */
    FirebaseMessaging.prototype.onTokenRefresh = /**
       * Triggers every time when FCM token updated.
       * You should usually call getToken to get an updated token and send it to server.
       *
       * @returns {Observable<void>}
       */
    function () {
        return;
    };
    /**
     * Subscribe to topic in background.
     *
     * @param {string} topic
     * @returns {Promise<null>}
     */
    /**
       * Subscribe to topic in background.
       *
       * @param {string} topic
       * @returns {Promise<null>}
       */
    FirebaseMessaging.prototype.subscribe = /**
       * Subscribe to topic in background.
       *
       * @param {string} topic
       * @returns {Promise<null>}
       */
    function (topic) {
        return;
    };
    /**
     * Unsubscribe from topic in background.
     *
     * @param {string} topic
     * @returns {Promise<null>}
     */
    /**
       * Unsubscribe from topic in background.
       *
       * @param {string} topic
       * @returns {Promise<null>}
       */
    FirebaseMessaging.prototype.unsubscribe = /**
       * Unsubscribe from topic in background.
       *
       * @param {string} topic
       * @returns {Promise<null>}
       */
    function (topic) {
        return;
    };
    /**
     * Reads current badge number (if supported).
     *
     * @returns {Promise<number>}
     */
    /**
       * Reads current badge number (if supported).
       *
       * @returns {Promise<number>}
       */
    FirebaseMessaging.prototype.getBadge = /**
       * Reads current badge number (if supported).
       *
       * @returns {Promise<number>}
       */
    function () {
        return;
    };
    /**
     * Sets current badge number (if supported).
     *
     * @param {number} value
     * @returns {Promise<null>}
     */
    /**
       * Sets current badge number (if supported).
       *
       * @param {number} value
       * @returns {Promise<null>}
       */
    FirebaseMessaging.prototype.setBadge = /**
       * Sets current badge number (if supported).
       *
       * @param {number} value
       * @returns {Promise<null>}
       */
    function (value) {
        return;
    };
    /**
     * Revoke the current FCM token.
     *
     * @returns {Promise<null>}
     */
    /**
       * Revoke the current FCM token.
       *
       * @returns {Promise<null>}
       */
    FirebaseMessaging.prototype.revokeToken = /**
       * Revoke the current FCM token.
       *
       * @returns {Promise<null>}
       */
    function () {
        return;
    };
    FirebaseMessaging.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({ observable: true, callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Observable)
    ], FirebaseMessaging.prototype, "onMessage", null);
    __decorate([
        Cordova({ observable: true, callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Observable)
    ], FirebaseMessaging.prototype, "onBackgroundMessage", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "requestPermission", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "getToken", null);
    __decorate([
        Cordova({ observable: true, callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Observable)
    ], FirebaseMessaging.prototype, "onTokenRefresh", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "subscribe", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "unsubscribe", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "getBadge", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "setBadge", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseMessaging.prototype, "revokeToken", null);
    /**
     * @beta
     * @name Firebase Messaging
     * @description
     * Cordova plugin for Firebase Messaging
     *
     * @usage
     * ```typescript
     * import { FirebaseMessaging } from '@ionic-native/firebase-messaging';
     *
     *
     * constructor(private firebaseMessaging: FirebaseMessaging) { }
     *
     * ...
     *
     *
     * this.firebaseMessaging.logEvent('page_view', {page: "dashboard"})
     *   .then((res: any) => console.log(res))
     *   .catch((error: any) => console.error(error));
     *
     * ```
     * @interfaces
     * IFirebaseMessage
     */
    FirebaseMessaging = __decorate([
        Plugin({
            pluginName: 'FirebaseMessaging',
            plugin: 'cordova-plugin-firebase-messaging',
            pluginRef: 'cordova.plugins.firebase.messaging',
            repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-messaging',
            platforms: ['Android', 'iOS']
        })
    ], FirebaseMessaging);
    return FirebaseMessaging;
}(IonicNativePlugin));
export { FirebaseMessaging };
//# sourceMappingURL=index.js.map
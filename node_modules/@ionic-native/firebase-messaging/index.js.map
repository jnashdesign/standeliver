{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/firebase-messaging/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;IAuCN,qCAAiB;;;;IACtD;;;;OAIG;;;;;;IAEH,qCAAS;;;;;;QACP,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,+CAAmB;;;;;;QACjB,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,6CAAiB;;;;;;QACf,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,oCAAQ;;;;;;QACN,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,0CAAc;;;;;;;QACZ,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,qCAAS;;;;;;cAAC,KAAa;QACrB,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,uCAAW;;;;;;cAAC,KAAa;QACvB,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,oCAAQ;;;;;;QACN,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,oCAAQ;;;;;;cAAC,KAAa;QACpB,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,uCAAW;;;;;;QACT,MAAM,CAAC;KACR;;gBAxGF,UAAU;;;QAOR,OAAO,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC;;;wCAC3C,UAAU;sDAEtB;;QAOA,OAAO,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC;;;wCACjC,UAAU;gEAEhC;;QAOA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;8DAGvB;;QAOA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;qDAGvB;;QAQA,OAAO,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC;;;wCACtC,UAAU;2DAE3B;;QAQA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;sDAGvB;;QAQA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;wDAGvB;;QAOA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;qDAGvB;;QAQA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;qDAGvB;;QAOA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;wDAGvB;;;;;;;;;;;;;;;;;;;;;;;;;IAvGU,iBAAiB;QAR7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,oCAAoC;YAC/C,IAAI,EAAE,iEAAiE;YACvE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,iBAAiB,EAwG7B;4BAjJD;EAyCuC,iBAAiB;SAA3C,iBAAiB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface IFirebaseMessage {\n  aps: any;\n  gcm: any;\n}\n\n/**\n * @beta\n * @name Firebase Messaging\n * @description\n * Cordova plugin for Firebase Messaging\n *\n * @usage\n * ```typescript\n * import { FirebaseMessaging } from '@ionic-native/firebase-messaging';\n *\n *\n * constructor(private firebaseMessaging: FirebaseMessaging) { }\n *\n * ...\n *\n *\n * this.firebaseMessaging.logEvent('page_view', {page: \"dashboard\"})\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n * @interfaces\n * IFirebaseMessage\n */\n@Plugin({\n  pluginName: 'FirebaseMessaging',\n  plugin: 'cordova-plugin-firebase-messaging',\n  pluginRef: 'cordova.plugins.firebase.messaging',\n  repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-messaging',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class FirebaseMessaging extends IonicNativePlugin {\n  /**\n   * Called when a push message received while app is in foreground.\n   *\n   * @returns {Observable<any>}\n   */\n  @Cordova({ observable: true, callbackOrder: 'reverse' })\n  onMessage(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Called when a push message received while app is in background.\n   *\n   * @returns {Observable<any>}\n   */\n  @Cordova({ observable: true, callbackOrder: 'reverse' })\n  onBackgroundMessage(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Grant permission to recieve push notifications (will trigger prompt on iOS).\n   *\n   * @returns {Promise<string>}\n   */\n  @Cordova({ sync: true })\n  requestPermission(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Returns a promise that fulfills with the current FCM token\n   *\n   * @returns {Promise<string>}\n   */\n  @Cordova({ sync: true })\n  getToken(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Triggers every time when FCM token updated.\n   * You should usually call getToken to get an updated token and send it to server.\n   *\n   * @returns {Observable<void>}\n   */\n  @Cordova({ observable: true, callbackOrder: 'reverse' })\n  onTokenRefresh(): Observable<void> {\n    return;\n  }\n\n  /**\n   * Subscribe to topic in background.\n   *\n   * @param {string} topic\n   * @returns {Promise<null>}\n   */\n  @Cordova({ sync: true })\n  subscribe(topic: string): Promise<null> {\n    return;\n  }\n\n  /**\n   * Unsubscribe from topic in background.\n   *\n   * @param {string} topic\n   * @returns {Promise<null>}\n   */\n  @Cordova({ sync: true })\n  unsubscribe(topic: string): Promise<null> {\n    return;\n  }\n\n  /**\n   * Reads current badge number (if supported).\n   *\n   * @returns {Promise<number>}\n   */\n  @Cordova({ sync: true })\n  getBadge(): Promise<number> {\n    return;\n  }\n\n  /**\n   * Sets current badge number (if supported).\n   *\n   * @param {number} value\n   * @returns {Promise<null>}\n   */\n  @Cordova({ sync: true })\n  setBadge(value: number): Promise<null> {\n    return;\n  }\n\n  /**\n   * Revoke the current FCM token.\n   *\n   * @returns {Promise<null>}\n   */\n  @Cordova({ sync: true })\n  revokeToken(): Promise<null> {\n    return;\n  }\n}\n"]}